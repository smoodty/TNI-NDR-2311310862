import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from datetime import datetime
from dateutil.relativedelta import relativedelta
import time
import base64

st.set_page_config(page_title="Tesla Dashboard", layout="wide")

# === ‡πÇ‡∏´‡∏•‡∏î CSS ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å ===
with open("custom_minimal_style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î GIF ‡πÄ‡∏õ‡πá‡∏ô base64 ===
def get_base64_of_gif(file_path):
    with open(file_path, "rb") as f:
        data = f.read()
        encoded = base64.b64encode(data).decode()
        return f"data:image/gif;base64,{encoded}"
    
    # === Load Excel Data ===
df = pd.read_excel("tesla 007 (1) new.xlsx", sheet_name="tesla", skiprows=1)
df.columns = [
    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î",
    "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á(%)", "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì(‡∏û‡∏±‡∏ô‡∏´‡∏∏‡πâ‡∏ô)", "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤(‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)"
]

# === Convert Thai Dates ===
thai_months = {
    "‡∏°.‡∏Ñ.": "01", "‡∏Å.‡∏û.": "02", "‡∏°‡∏µ.‡∏Ñ.": "03", "‡πÄ‡∏°.‡∏¢.": "04",
    "‡∏û.‡∏Ñ.": "05", "‡∏°‡∏¥.‡∏¢.": "06", "‡∏Å.‡∏Ñ.": "07", "‡∏™.‡∏Ñ.": "08",
    "‡∏Å.‡∏¢.": "09", "‡∏ï.‡∏Ñ.": "10", "‡∏û.‡∏¢.": "11", "‡∏ò.‡∏Ñ.": "12"
}

def convert_thai_date(thai_date_str):
    for th, num in thai_months.items():
        if th in thai_date_str:
            day, month_th, year_th = thai_date_str.replace(",", "").split()
            month = thai_months[month_th]
            year = int(year_th) - 543
            return f"{year}-{month}-{int(day):02d}"
    return None

df = df[~df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].isna() & ~df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].astype(str).str.contains("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")]
df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].apply(convert_thai_date)
df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"])

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
for col in df.columns[1:]:
    df[col] = pd.to_numeric(df[col], errors='coerce')

df = df.dropna()
df_sorted = df.sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", ascending=False)

# === Filter ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
last_date = df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].max()
six_months_ago = last_date - relativedelta(months=6)
df_6mo = df_sorted[df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] >= six_months_ago]

# === Sidebar Menu ===
with st.sidebar:
    st.markdown("### üìå Tesla 6-Month Dashboard")
    st.markdown("#### ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π üëá")
    menu = st.radio("", ("üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î", "üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "üìë ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö"))

# === Chart Page ===
if menu == "üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î":
    gif_data_url = get_base64_of_gif("ponke-ponkesol.gif")

    st.markdown(f"""
    <h2 style="display: flex; align-items: center; gap: 10px;">
    üìâ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏´‡∏∏‡πâ‡∏ô Tesla (TSLA80)
    <img src="{gif_data_url}" width="40" style="border-radius: 6px;">
    </h2>
    """, unsafe_allow_html=True)

    X = df_6mo["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].map(pd.Timestamp.toordinal).values.reshape(-1, 1)
    y = df_6mo["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î"].values
    model = LinearRegression()
    model.fit(X, y)
    trend = model.predict(X)

    fig, ax = plt.subplots(figsize=(14, 6))
    ax.plot(df_6mo["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], y, label="Actual Closing Price", color="#264653", linewidth=2)
    ax.plot(df_6mo["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], trend, label="Trend (Linear Regression)", linestyle="--", color="#e76f51", linewidth=2)
    ax.set_title("TSLA80 Closing Price Trend")
    ax.set_xlabel("Date")
    ax.set_ylabel("Closing Price (Baht)")
    ax.grid(True, alpha=0.3)
    ax.legend()
    st.pyplot(fig)
